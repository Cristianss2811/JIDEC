/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jide;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import static jide.Tokens.*;
import jide.Sintactico;

/**
 *
 * @author juanp
 */
public class ide extends javax.swing.JFrame {

    Linea Linea;
    Directorio direc;
    HashMap<Integer, Map<String, String>> tablaSimbolos;

    /**
     * Creates new form ide
     */
    public ide() {
        initComponents();
        setIconImage(getIconImage());
        iniciar();
        colors();
    }
    
    

    //Icono del jFrame
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/logojacide500px.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    //MÃ©todo para encontrar las ultimas cadenas
    
    private int findLastNonWordChar(String text, int index)
    {
        while(--index >=0)
        {
            // W = [A-Za-z0-9]
            if(String.valueOf(text.charAt(index)).matches("\\W"))
            {
                break;
            } 
        }
        return index;
    }
    
    //Metodo para encontrar las primeras cadenas
    private int findFirstNonWordChar(String text, int index)
    {
        while(index < text.length())
        {
            if(String.valueOf(text.charAt(index)).matches("\\W"))
            {
                break;
            }    
            index++;
        }
        return index;
    }
    
    
    //Metodo para pintar las palabras reservadas
    private void colors()
    {
        final StyleContext cont = StyleContext.getDefaultStyleContext();
        
        //Colores
        final AttributeSet attblue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color (0, 147, 255));
        final AttributeSet attwhite = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color (255,255,255));
        
        
        //Stylo
        DefaultStyledDocument doc = new DefaultStyledDocument()
        {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException 
            {
                super.insertString(offset, str, a);
                
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if(before < 0 )
                {
                    before = 0;
                }
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;
                
                while(wordR <= after)
                    
                {
                    if(wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W"))
                    {
                        if(text.substring(wordL, wordR).matches("(\\W)*(int|float|char)"))
                        {
                            setCharacterAttributes(wordL, wordR - wordL, attblue, false);
                        }
                        else
                        {
                            setCharacterAttributes(wordL, wordR - wordL, attwhite, false);
                        }
                        wordL = wordR;
                    }
                    wordR++;
                }
            }
            public void romeve(int offs, int len) throws BadLocationException {
                super.remove(offs, len);
                
                String text = getText(0,getLength());
                int before = findLastNonWordChar(text,offs);
                if(before < 0)
                {
                   before = 0; 
                }
            }
        }; 
        
        JTextPane txt = new JTextPane(doc);
        String temp = jTPCodigo.getText();
        jTPCodigo.setStyledDocument(txt.getStyledDocument());
        jTPCodigo.setText(temp);
        
        
    }
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fondo = new javax.swing.JPanel();
        contenedorbtnNuevo = new javax.swing.JPanel();
        BTNNuevo = new javax.swing.JButton();
        contenedorbtnAbrir = new javax.swing.JPanel();
        BTNAbrir = new javax.swing.JButton();
        contenedorbtnGuardar = new javax.swing.JPanel();
        BTNGuardar = new javax.swing.JButton();
        contenedorbtnGuardarComo = new javax.swing.JPanel();
        BTNGComo = new javax.swing.JButton();
        contenedorbtnCompilar = new javax.swing.JPanel();
        BTNCompilar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTPCodigo = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTPLexico = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTPSintactico = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        JTPError = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jMenuItemGuardarC = new javax.swing.JMenuItem();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1634, 1001));
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Fondo.setBackground(new java.awt.Color(36, 38, 48));
        Fondo.setPreferredSize(new java.awt.Dimension(1634, 1001));

        contenedorbtnNuevo.setBackground(new java.awt.Color(36, 38, 48));
        contenedorbtnNuevo.setPreferredSize(new java.awt.Dimension(38, 38));
        contenedorbtnNuevo.setLayout(new java.awt.BorderLayout());

        BTNNuevo.setBackground(new java.awt.Color(153, 153, 153));
        BTNNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregar-archivo32px.png"))); // NOI18N
        BTNNuevo.setBorder(null);
        BTNNuevo.setContentAreaFilled(false);
        BTNNuevo.setHideActionText(true);
        BTNNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BTNNuevo.setPreferredSize(new java.awt.Dimension(38, 38));
        BTNNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BTNNuevoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BTNNuevoMouseExited(evt);
            }
        });
        BTNNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNNuevoActionPerformed(evt);
            }
        });
        contenedorbtnNuevo.add(BTNNuevo, java.awt.BorderLayout.CENTER);

        contenedorbtnAbrir.setBackground(new java.awt.Color(36, 38, 48));
        contenedorbtnAbrir.setMinimumSize(new java.awt.Dimension(38, 38));
        contenedorbtnAbrir.setPreferredSize(new java.awt.Dimension(38, 38));
        contenedorbtnAbrir.setLayout(new java.awt.BorderLayout());

        BTNAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/abrir-documento32px.png"))); // NOI18N
        BTNAbrir.setBorder(null);
        BTNAbrir.setContentAreaFilled(false);
        BTNAbrir.setDefaultCapable(false);
        BTNAbrir.setHideActionText(true);
        BTNAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BTNAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BTNAbrirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BTNAbrirMouseExited(evt);
            }
        });
        BTNAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNAbrirActionPerformed(evt);
            }
        });
        contenedorbtnAbrir.add(BTNAbrir, java.awt.BorderLayout.CENTER);

        contenedorbtnGuardar.setBackground(new java.awt.Color(36, 38, 48));
        contenedorbtnGuardar.setMinimumSize(new java.awt.Dimension(32, 32));
        contenedorbtnGuardar.setPreferredSize(new java.awt.Dimension(38, 38));
        contenedorbtnGuardar.setLayout(new java.awt.BorderLayout());

        BTNGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/guardar32px.png"))); // NOI18N
        BTNGuardar.setToolTipText("Guardar Documento");
        BTNGuardar.setBorder(null);
        BTNGuardar.setContentAreaFilled(false);
        BTNGuardar.setHideActionText(true);
        BTNGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BTNGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BTNGuardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BTNGuardarMouseExited(evt);
            }
        });
        BTNGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGuardarActionPerformed(evt);
            }
        });
        contenedorbtnGuardar.add(BTNGuardar, java.awt.BorderLayout.CENTER);

        contenedorbtnGuardarComo.setBackground(new java.awt.Color(36, 38, 48));
        contenedorbtnGuardarComo.setMinimumSize(new java.awt.Dimension(32, 32));
        contenedorbtnGuardarComo.setPreferredSize(new java.awt.Dimension(38, 38));
        contenedorbtnGuardarComo.setLayout(new java.awt.BorderLayout());

        BTNGComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/guardarcomo32px.png"))); // NOI18N
        BTNGComo.setBorder(null);
        BTNGComo.setContentAreaFilled(false);
        BTNGComo.setHideActionText(true);
        BTNGComo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BTNGComo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BTNGComoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BTNGComoMouseExited(evt);
            }
        });
        BTNGComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGComoActionPerformed(evt);
            }
        });
        contenedorbtnGuardarComo.add(BTNGComo, java.awt.BorderLayout.CENTER);

        contenedorbtnCompilar.setBackground(new java.awt.Color(36, 38, 48));
        contenedorbtnCompilar.setMinimumSize(new java.awt.Dimension(32, 32));
        contenedorbtnCompilar.setPreferredSize(new java.awt.Dimension(38, 38));
        contenedorbtnCompilar.setLayout(new java.awt.BorderLayout());

        BTNCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/play32px.png"))); // NOI18N
        BTNCompilar.setBorder(null);
        BTNCompilar.setContentAreaFilled(false);
        BTNCompilar.setHideActionText(true);
        BTNCompilar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BTNCompilar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BTNCompilarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BTNCompilarMouseExited(evt);
            }
        });
        BTNCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNCompilarActionPerformed(evt);
            }
        });
        contenedorbtnCompilar.add(BTNCompilar, java.awt.BorderLayout.CENTER);

        jTPCodigo.setBackground(new java.awt.Color(36, 38, 48));
        jTPCodigo.setForeground(new java.awt.Color(255, 255, 255));
        jTPCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTPCodigoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTPCodigo);

        jTPLexico.setEditable(false);
        jTPLexico.setBackground(new java.awt.Color(36, 38, 48));
        jTPLexico.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jTPLexico);

        JTPSintactico.setEditable(false);
        JTPSintactico.setBackground(new java.awt.Color(36, 38, 48));
        JTPSintactico.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setViewportView(JTPSintactico);

        JTPError.setEditable(false);
        JTPError.setBackground(new java.awt.Color(36, 38, 48));
        JTPError.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane5.setViewportView(JTPError);

        jPanel2.setBackground(new java.awt.Color(48, 177, 251));
        jPanel2.setPreferredSize(new java.awt.Dimension(3, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("LÃXICO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("SINTÃCTICO");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("ERROR");

        javax.swing.GroupLayout FondoLayout = new javax.swing.GroupLayout(Fondo);
        Fondo.setLayout(FondoLayout);
        FondoLayout.setHorizontalGroup(
            FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FondoLayout.createSequentialGroup()
                .addComponent(contenedorbtnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorbtnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorbtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorbtnGuardarComo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contenedorbtnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(FondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FondoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(FondoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        FondoLayout.setVerticalGroup(
            FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FondoLayout.createSequentialGroup()
                .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FondoLayout.createSequentialGroup()
                        .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contenedorbtnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contenedorbtnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contenedorbtnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contenedorbtnGuardarComo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contenedorbtnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)))
                    .addGroup(FondoLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(257, Short.MAX_VALUE))
        );

        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jMenuBar1.setBackground(new java.awt.Color(36, 38, 48));

        jMenu1.setText("Archivo");

        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAbrir);

        jMenuItemGuardar.setText("Guardar");
        jMenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGuardar);

        jMenuItemGuardarC.setText("Guaradar como");
        jMenuItemGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarCActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGuardarC);

        jMenuItemNuevo.setText("nuevo");
        jMenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuevo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compilar");

        jMenuItem5.setText("Compilar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
        // TODO add your handling code here:
        direc.Guardar(this);
        clearAllComp();
    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void BTNAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNAbrirActionPerformed
        // TODO add your handling code here:
        direc.Abrir(this);
        clearAllComp();
    }//GEN-LAST:event_BTNAbrirActionPerformed

    private void BTNGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGuardarActionPerformed
        // TODO add your handling code here:
        direc.Guardar(this);
        clearAllComp();
    }//GEN-LAST:event_BTNGuardarActionPerformed

    private void BTNNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNNuevoActionPerformed
        // TODO add your handling code here:
        clearAllComp();
        jTPCodigo.setText("");
        direc.Nuevo(this);
    }//GEN-LAST:event_BTNNuevoActionPerformed

    private void BTNGComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGComoActionPerformed
        // TODO add your handling code here:
        direc.guardarC(this);

    }//GEN-LAST:event_BTNGComoActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        // TODO add your handling code here:
        direc.Abrir(this);
        clearAllComp();
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jTPCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPCodigoKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();
        if ((key >= 65 && key <= 90) || (key >= 48 && key <= 57) || (key >= 97 && key <= 122) || (key != 27 && !(key >= 37 && key <= 40) && !(key >= 16 && key <= 18) && key != 524 && key != 20)) {
            if (!getTitle().contains("*")) {
                setTitle(getTitle() + "*");
            }
        }
        /*Este cÃ³digo se refiere a un evento de teclado en Java. El primer paso es obtener el cÃ³digo de la tecla que se ha presionado
        y almacenarlo en la variable "key". Luego, se verifica si la tecla presionada es una letra (mayÃºscula o minÃºscula) o un nÃºmero
        . Si es asÃ­, o si no es ninguna de las teclas especiales (escape, flechas, teclas de modificaciÃ³n de texto), se verifica si el
        tÃ­tulo de la ventana no contiene ya el asterisco "*" indicando que hay cambios pendientes en el documento. Si el tÃ­tulo no contiene
        el asterisco, entonces se agrega el asterisco al tÃ­tulo usando el mÃ©todo setTitle(). Esto indica al usuario que se han realizado cambios
        en el documento y que deben ser guardados antes de cerrar la ventana.
*/
    }//GEN-LAST:event_jTPCodigoKeyReleased

    private void BTNCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNCompilarActionPerformed
        // TODO add your handling code here:
        Sintactico obs = new Sintactico();
        boolean ban=true;
        direc.Guardar(this);
        clearAllComp();
        Analisis c = new Analisis();
        //Se crea una nueva instancia de la clase Analisis (presumiblemente para realizar algÃºn tipo de anÃ¡lisis o verificaciÃ³n del cÃ³digo mÃ¡s adelante).
        File archivo = new File("Compilacion.jac");
//        Se crea un objeto File que representa el archivo "Compilacion.jac".
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            //Se crea un objeto PrintWriter que se utilizarÃ¡ para escribir el contenido del editor de cÃ³digo (jTPCodigo) en el archivo "Compilacion.jac".
            escribir.print(jTPCodigo.getText());
            //Se escribe el contenido del editor de cÃ³digo en el archivo "Compilacion.jac".
            escribir.close();
            //Se cierra el objeto PrintWriter.
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            tablaSimbolos = new HashMap<>();
            Reader lector = new BufferedReader(new FileReader("Compilacion.jac"));
            //Se crea un objeto Reader que leerÃ¡ el contenido del archivo "Compilacion.jac".
            Lexer lexer = new Lexer(lector);
            //Se crea un objeto Lexer que analiza el contenido del archivo y produce tokens que representan las diferentes partes del cÃ³digo.
            String resultado = "";
            int i = 0;
            while (ban) {
                //Se inicia un bucle while que continuarÃ¡ hasta que se hayan producido todos los tokens.
                Tokens tokens = lexer.yylex();
                //En cada iteraciÃ³n del bucle while, se llama al mÃ©todo yylex() del objeto Lexer para obtener el siguiente token.
                if (tokens == null) {
                    obs.Analisis("$", c.linea + 1);
                    resultado += "$";
                    //Si se ha llegado al final del archivo, se agrega el carÃ¡cter "$" a la cadena resultado y se muestra en el componente jTPLexico.
                    jTPLexico.setText(resultado);
                    JTPSintactico.setText(obs.Resultado());
                    if(!obs.error.equals(""))
                        JTPError.setText(obs.error);
                    return;
                }
                switch (tokens) {
                    case Error:
                        obs.error += "Error lexico en la linea " + (c.linea + 1) + " con el lexema " + lexer.lexeme + "\n";
                        //Si el token es de tipo "Error", se agrega una cadena que indica que se encontrÃ³ un sÃ­mbolo no definido en la lÃ­nea correspondiente a resultado.
                        if(lexer.lexeme.equals(""+'"')){
                            ban=false;
                            obs.Analisis("$", c.linea + 1);
                            resultado += "$";
                            jTPLexico.setText(resultado);
                            JTPSintactico.setText(obs.Resultado());
                            JTPError.setText(obs.error);
                        }
                        break;
                    case id:
                        resultado += id + "\n";
                        obs.Analisis("id", c.linea + 1);
                        break;
                    case num:
                        resultado += num + "\n";
                        obs.Analisis("num", c.linea + 1);
                        break;
                    case ent:
                         resultado += lexer.lexeme + "\n";
                        obs.Analisis("int", c.linea + 1);
                        break;
                    case flot:
                         resultado += lexer.lexeme + "\n";
                        obs.Analisis("float", c.linea + 1);
                        break;
                    case car:
                         resultado += lexer.lexeme + "\n";
                        obs.Analisis("char", c.linea + 1);
                        break;
                    case punto_coma:
                         resultado += lexer.lexeme + "\n";
                        obs.Analisis(";", c.linea + 1);
                        break;
                    case mas:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("+", c.linea + 1);
                        break;
                    case menos:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("-", c.linea + 1);
                        break;
                    case parentesis_abre:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("(", c.linea + 1);
                        break;
                    case parentesis_cierra:
                         resultado += lexer.lexeme + "\n";
                        obs.Analisis(")", c.linea + 1);
                        break;
                    case igual:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("=", c.linea + 1);
                        break;
                    case division:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("/", c.linea + 1);
                        break;
                    case multiplicacion:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("*", c.linea + 1);
                        break;
                    case coma:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis(",", c.linea + 1);
                        break;
                    default:
                        resultado += tokens + "\n";
                        obs.Analisis("" + tokens, c.linea + 1);
                        break;
                }
                if (!("" + tokens).equals("Error")) {
                    tablaSimbolos.put(i, new HashMap<String, String>());
                    tablaSimbolos.get(i).put("Lexema", lexer.lexeme);
                    tablaSimbolos.get(i).put("Token", "" + tokens);
                    tablaSimbolos.get(i).put("Linea", "" + (c.linea + 1));
                    i++;
                    //System.out.println(tablaSimbolos);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        }
//Si se produce una excepciÃ³n de FileNotFoundException o IOException, se muestra un mensaje de error en el registro de eventos del IDE.
    }//GEN-LAST:event_BTNCompilarActionPerformed

    private void BTNNuevoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNNuevoMouseEntered
        contenedorbtnNuevo.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_BTNNuevoMouseEntered

    private void BTNNuevoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNNuevoMouseExited
        contenedorbtnNuevo.setBackground(new Color(36,38,48));
    }//GEN-LAST:event_BTNNuevoMouseExited

    private void BTNAbrirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNAbrirMouseEntered
        contenedorbtnAbrir.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_BTNAbrirMouseEntered

    private void BTNAbrirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNAbrirMouseExited
        contenedorbtnAbrir.setBackground(new Color(36,38,48));
    }//GEN-LAST:event_BTNAbrirMouseExited

    private void BTNGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNGuardarMouseEntered
        contenedorbtnGuardar.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_BTNGuardarMouseEntered

    private void BTNGuardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNGuardarMouseExited
        contenedorbtnGuardar.setBackground(new Color(36,38,48));
    }//GEN-LAST:event_BTNGuardarMouseExited

    private void BTNGComoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNGComoMouseEntered
        contenedorbtnGuardarComo.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_BTNGComoMouseEntered

    private void BTNGComoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNGComoMouseExited
        contenedorbtnGuardarComo.setBackground(new Color(36,38,48));
    }//GEN-LAST:event_BTNGComoMouseExited

    private void BTNCompilarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNCompilarMouseEntered
        contenedorbtnCompilar.setBackground(new Color(153, 153, 153));
    }//GEN-LAST:event_BTNCompilarMouseEntered

    private void BTNCompilarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BTNCompilarMouseExited
        contenedorbtnCompilar.setBackground(new Color(36,38,48));
    }//GEN-LAST:event_BTNCompilarMouseExited

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        Sintactico obs = new Sintactico();
        direc.Guardar(this);
        clearAllComp();
        Analisis c = new Analisis();
        File archivo = new File("Compilacion.jac");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(jTPCodigo.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            tablaSimbolos = new HashMap<>();
            Reader lector = new BufferedReader(new FileReader("Compilacion.jac"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            int i = 0;
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    obs.Analisis("$", c.linea + 1);
                    resultado += "$";
                    jTPLexico.setText(resultado);
                    JTPSintactico.setText(obs.Resultado());
                    return;
                }
                switch (tokens) {
                    case Error:
                        resultado += "Error lexico en la linea " + (c.linea + 1) + " con el lexema " + lexer.lexeme + "\n";
                        break;
                    case id:
                        resultado += id + "\n";
                        obs.Analisis("id", c.linea + 1);
                        break;
                    case num:
                        resultado += num + "\n";
                        obs.Analisis("num", c.linea + 1);
                        break;
                    case ent:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("int", c.linea + 1);
                        break;
                    case flot:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("float", c.linea + 1);
                        break;
                    case car:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("char", c.linea + 1);
                        break;
                    case punto_coma:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis(";", c.linea + 1);
                        break;
                    case mas:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("+", c.linea + 1);
                        break;
                    case menos:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("-", c.linea + 1);
                        break;
                    case parentesis_abre:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("(", c.linea + 1);
                        break;
                    case parentesis_cierra:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis(")", c.linea + 1);
                        break;
                    case igual:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("=", c.linea + 1);
                        break;
                    case division:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("/", c.linea + 1);
                        break;
                    case multiplicacion:
                        resultado += lexer.lexeme + "\n";
                        obs.Analisis("*", c.linea + 1);
                        break;
                    default:
                        resultado += tokens + "\n";
                        obs.Analisis("" + tokens, c.linea + 1);
                        break;
                }
                if (!("" + tokens).equals("Error")) {
                    tablaSimbolos.put(i, new HashMap<String, String>());
                    tablaSimbolos.get(i).put("Lexema", lexer.lexeme);
                    tablaSimbolos.get(i).put("Token", "" + tokens);
                    tablaSimbolos.get(i).put("Linea", "" + (c.linea + 1));
                    i++;
                    //System.out.println(tablaSimbolos);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ide.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
        // TODO add your handling code here:
        clearAllComp();
        jTPCodigo.setText("");
        direc.Nuevo(this);
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void jMenuItemGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarCActionPerformed
        // TODO add your handling code here:
        direc.guardarC(this);
    }//GEN-LAST:event_jMenuItemGuardarCActionPerformed

    /**
     * @param args the command line arguments
     */
    private void iniciar() {
        direc = new Directorio();
        setTitle("#JACIDE");
        String[] opciones = new String[]{"Guardar-continuar", "Descartar"};
        Linea = new Linea(jTPCodigo);
        jScrollPane1.setRowHeaderView(Linea);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ide().setVisible(true);
            }
        });
    }

    public void clearAllComp() {
        jTPLexico.setText("");
        JTPSintactico.setText("");
        JTPError.setText("");
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNAbrir;
    private javax.swing.JButton BTNCompilar;
    private javax.swing.JButton BTNGComo;
    private javax.swing.JButton BTNGuardar;
    private javax.swing.JButton BTNNuevo;
    private javax.swing.JPanel Fondo;
    private javax.swing.JTextPane JTPError;
    private javax.swing.JTextPane JTPSintactico;
    private javax.swing.JPanel contenedorbtnAbrir;
    private javax.swing.JPanel contenedorbtnCompilar;
    private javax.swing.JPanel contenedorbtnGuardar;
    private javax.swing.JPanel contenedorbtnGuardarComo;
    private javax.swing.JPanel contenedorbtnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemGuardarC;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JTextPane jTPCodigo;
    public javax.swing.JTextPane jTPLexico;
    // End of variables declaration//GEN-END:variables
}
