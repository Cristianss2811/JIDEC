/* The following code was generated by JFlex 1.4.3 on 26/05/23, 13:14 */

package jide;
import java.io.*;
import static jide.Tokens.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/05/23, 13:14 from the specification file
 * <tt>C:/Users/juanp/OneDrive/Documentos/Workspace/JIDE/src/jide/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\11\2\0\1\16\22\0\1\14\1\57\1\7\1\0"+
    "\1\0\1\54\1\61\1\12\1\45\1\46\1\20\1\6\1\43\1\2"+
    "\1\4\1\17\12\3\1\44\1\42\1\55\1\53\1\56\2\0\32\1"+
    "\1\47\1\10\1\50\1\0\1\1\1\0\1\26\1\13\1\30\1\31"+
    "\1\5\1\35\1\25\1\1\1\32\2\1\1\37\1\27\1\33\1\24"+
    "\1\22\1\1\1\23\1\40\1\34\1\36\1\41\4\1\1\51\1\60"+
    "\1\52\42\0\1\21\uff5f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\1\1\7\1\1\1\2\3\7\1\10\1\11\10\2"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\1\1\2"+
    "\1\30\1\0\1\4\1\0\1\2\1\31\2\0\1\2"+
    "\1\32\2\0\6\2\1\0\4\2\1\33\1\34\1\2"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\0\1\2"+
    "\2\0\1\4\1\43\1\44\1\0\1\2\2\0\1\45"+
    "\3\2\1\46\1\47\3\2\1\50\5\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\0\1\45\2\2\1\51"+
    "\1\52\3\2\1\50\2\2\1\53\1\54\1\2\1\0"+
    "\2\2\1\32\1\0\1\45\1\0\5\2\1\0\1\50"+
    "\1\0\1\55\5\2\1\0\1\45\1\0\5\2\1\0"+
    "\1\50\1\0\4\2\1\0\5\2\1\0\1\56\1\2"+
    "\1\57\1\60\1\45\1\61\2\2\1\62\1\2\1\50"+
    "\4\2\1\63\1\2\1\64\1\65\2\2\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\62\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\62\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\u047e\0\62\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\62\0\372\0\u05dc\0\u060e\0\u0640\0\62"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u05aa\0\u05aa\0\u09c4\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u05aa\0\u05aa\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u01c2\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u05aa"+
    "\0\u05aa\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u05aa"+
    "\0\u05aa\0\u1194\0\u11c6\0\u11f8\0\u122a\0\62\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u05aa\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u05aa\0\u19c8\0\u05aa"+
    "\0\u05aa\0\u19fa\0\u05aa\0\u1a2c\0\u1a5e\0\u05aa\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u05aa\0\u1bbc\0\u05aa\0\u05aa"+
    "\0\u1bee\0\u1c20\0\u05aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\5\3\1\23\1\24\1\25\2\3"+
    "\1\26\1\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\63\0\1\52\3\0"+
    "\1\52\5\0\1\52\6\0\20\52\22\0\1\53\1\5"+
    "\1\54\60\0\1\5\1\55\1\56\57\0\1\55\57\0"+
    "\1\52\3\0\1\52\5\0\1\52\6\0\11\52\1\57"+
    "\6\52\26\0\1\60\53\0\62\11\10\61\1\62\1\61"+
    "\1\0\47\61\1\0\1\52\3\0\1\52\5\0\1\52"+
    "\6\0\2\52\1\63\15\52\34\0\1\15\62\0\1\16"+
    "\62\0\1\17\62\0\1\64\1\65\42\0\1\52\2\0"+
    "\1\66\1\52\5\0\1\52\6\0\1\52\1\67\2\52"+
    "\1\70\13\52\21\0\1\52\3\0\1\52\5\0\1\52"+
    "\6\0\4\52\1\71\13\52\21\0\1\52\3\0\1\72"+
    "\5\0\1\52\6\0\20\52\21\0\1\52\3\0\1\52"+
    "\5\0\1\52\6\0\5\52\1\73\3\52\1\74\6\52"+
    "\21\0\1\52\2\0\1\75\1\52\5\0\1\52\6\0"+
    "\4\52\1\76\7\52\1\77\1\100\2\52\21\0\1\52"+
    "\3\0\1\101\5\0\1\52\6\0\20\52\21\0\1\52"+
    "\3\0\1\52\5\0\1\52\6\0\10\52\1\102\1\103"+
    "\6\52\21\0\1\52\3\0\1\104\5\0\1\52\6\0"+
    "\20\52\73\0\1\105\61\0\1\106\61\0\1\107\61\0"+
    "\1\110\66\0\1\111\62\0\1\112\1\0\1\52\1\113"+
    "\1\114\1\115\1\52\5\0\1\52\6\0\20\52\23\0"+
    "\1\55\1\0\1\56\56\0\1\116\1\117\2\0\1\116"+
    "\54\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\12\52\1\120\5\52\32\0\1\121\57\0\1\122"+
    "\52\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\2\52\1\123\15\52\20\0\11\64\1\0\50\64"+
    "\20\124\1\125\41\124\1\0\1\126\3\0\1\126\5\0"+
    "\1\126\6\0\20\126\21\0\1\52\1\113\1\114\1\115"+
    "\1\52\5\0\1\52\6\0\2\52\1\127\15\52\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\1\52\1\130\14\52\1\131\1\52\21\0\1\52\1\113"+
    "\1\114\1\115\1\52\5\0\1\52\6\0\1\52\1\132"+
    "\5\52\1\133\10\52\21\0\1\52\1\113\1\114\1\115"+
    "\1\52\5\0\1\52\6\0\6\52\1\134\11\52\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\1\135\17\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\6\52\1\136\11\52\21\0\1\137"+
    "\3\0\1\137\5\0\1\137\6\0\20\137\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\15\52"+
    "\1\140\2\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\11\52\1\141\6\52\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\2\52"+
    "\1\142\15\52\21\0\1\52\1\113\1\114\1\115\1\143"+
    "\5\0\1\52\6\0\20\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\1\52\1\144\16\52"+
    "\23\0\1\114\1\115\56\0\1\145\1\0\1\114\1\146"+
    "\1\147\5\0\1\145\6\0\20\145\23\0\1\146\61\0"+
    "\1\117\57\0\1\52\1\113\1\114\1\115\1\52\5\0"+
    "\1\52\6\0\2\52\1\150\15\52\32\0\1\151\57\0"+
    "\1\61\1\0\2\61\7\0\1\61\7\0\3\61\25\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\15\52\1\152\2\52\20\0\20\124\1\153\41\124\20\0"+
    "\1\125\1\154\41\0\1\155\3\0\1\155\5\0\1\155"+
    "\6\0\20\155\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\3\52\1\156\2\52\1\157\11\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\4\52\1\160\13\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\2\52\1\161\15\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\1\52\1\162\16\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\1\52\1\163\16\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\1\52\1\164\16\52\21\0\1\165\3\0\1\165"+
    "\5\0\1\165\6\0\20\165\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\16\52\1\166\1\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\6\52\1\167\11\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\12\52\1\170\5\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\1\52\1\171\16\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\7\52\1\172\10\52"+
    "\21\0\1\145\1\113\1\114\1\115\1\145\5\0\1\145"+
    "\6\0\20\145\21\0\1\145\1\0\1\146\1\0\1\147"+
    "\5\0\1\145\6\0\20\145\21\0\1\145\1\113\1\114"+
    "\1\115\1\145\1\173\4\0\1\145\6\0\20\145\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\11\52\1\174\6\52\21\0\1\52\1\113\1\114\1\115"+
    "\1\175\5\0\1\52\6\0\20\52\20\0\17\124\1\176"+
    "\1\153\41\124\17\0\1\176\43\0\1\155\1\177\1\200"+
    "\1\201\1\155\5\0\1\155\6\0\20\155\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\1\52"+
    "\1\202\16\52\21\0\1\52\1\113\1\114\1\115\1\203"+
    "\5\0\1\52\6\0\20\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\204\5\0\1\52\6\0\20\52\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\10\52"+
    "\1\205\7\52\21\0\1\52\1\113\1\114\1\115\1\206"+
    "\5\0\1\52\6\0\20\52\21\0\1\165\1\207\1\210"+
    "\1\211\1\165\5\0\1\165\6\0\20\165\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\2\52"+
    "\1\212\15\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\10\52\1\213\7\52\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\4\52"+
    "\1\214\13\52\23\0\1\215\57\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\6\52\1\216\11\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\4\52\1\217\13\52\23\0\1\200\1\201\56\0"+
    "\1\220\1\0\1\200\1\221\1\222\5\0\1\220\6\0"+
    "\20\220\23\0\1\221\57\0\1\52\1\113\1\114\1\115"+
    "\1\52\5\0\1\52\6\0\4\52\1\223\13\52\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\7\52\1\224\10\52\21\0\1\52\1\113\1\114\1\115"+
    "\1\52\5\0\1\52\6\0\5\52\1\225\12\52\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\5\52\1\226\12\52\21\0\1\52\1\113\1\114\1\115"+
    "\1\52\5\0\1\52\6\0\5\52\1\227\12\52\23\0"+
    "\1\210\1\211\56\0\1\230\1\0\1\210\1\231\1\232"+
    "\5\0\1\230\6\0\20\230\23\0\1\231\57\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\2\52"+
    "\1\233\15\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\7\52\1\234\10\52\21\0\1\145"+
    "\1\0\1\215\1\0\1\145\5\0\1\145\6\0\20\145"+
    "\21\0\1\52\1\113\1\114\1\115\1\235\5\0\1\52"+
    "\6\0\20\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\11\52\1\236\6\52\21\0\1\220"+
    "\1\177\1\200\1\201\1\220\5\0\1\220\6\0\20\220"+
    "\21\0\1\220\1\0\1\221\1\0\1\222\5\0\1\220"+
    "\6\0\20\220\21\0\1\220\1\177\1\200\1\201\1\220"+
    "\1\237\4\0\1\220\6\0\20\220\21\0\1\52\1\113"+
    "\1\114\1\115\1\52\5\0\1\52\6\0\5\52\1\240"+
    "\12\52\21\0\1\52\1\113\1\114\1\115\1\52\5\0"+
    "\1\52\6\0\10\52\1\241\7\52\21\0\1\52\1\113"+
    "\1\114\1\115\1\242\5\0\1\52\6\0\20\52\21\0"+
    "\1\52\1\113\1\114\1\115\1\52\5\0\1\52\6\0"+
    "\10\52\1\243\7\52\21\0\1\52\1\113\1\114\1\115"+
    "\1\244\5\0\1\52\6\0\20\52\21\0\1\230\1\207"+
    "\1\210\1\211\1\230\5\0\1\230\6\0\20\230\21\0"+
    "\1\230\1\0\1\231\1\0\1\232\5\0\1\230\6\0"+
    "\20\230\21\0\1\230\1\207\1\210\1\211\1\230\1\245"+
    "\4\0\1\230\6\0\20\230\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\11\52\1\246\6\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\247\5\0\1\52"+
    "\6\0\20\52\21\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\16\52\1\250\1\52\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\2\52"+
    "\1\251\15\52\23\0\1\252\57\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\4\52\1\253\13\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\5\52\1\254\12\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\11\52\1\255\6\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\1\52\1\256\16\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\11\52\1\257\6\52"+
    "\23\0\1\260\57\0\1\52\1\113\1\114\1\115\1\52"+
    "\5\0\1\52\6\0\1\52\1\261\16\52\21\0\1\220"+
    "\1\0\1\252\1\0\1\220\5\0\1\220\6\0\20\220"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\10\52\1\262\7\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\12\52\1\263\5\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\12\52\1\264\5\52\21\0\1\230\1\0\1\260"+
    "\1\0\1\230\5\0\1\230\6\0\20\230\21\0\1\52"+
    "\1\113\1\114\1\115\1\52\5\0\1\52\6\0\2\52"+
    "\1\265\15\52\21\0\1\52\1\113\1\114\1\115\1\266"+
    "\5\0\1\52\6\0\20\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\2\52\1\267\15\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\2\52\1\270\15\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\11\52\1\271\6\52"+
    "\21\0\1\52\1\113\1\114\1\115\1\52\5\0\1\52"+
    "\6\0\12\52\1\272\5\52\21\0\1\52\1\113\1\114"+
    "\1\115\1\52\5\0\1\52\6\0\2\52\1\273\15\52"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\6\1\1\11\10\1\11\11"+
    "\1\1\1\11\6\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\2\1\2\0\6\1\1\0\7\1\6\11"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\2\0\17\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\16\1"+
    "\1\0\2\1\1\11\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\0\6\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\0\4\1\1\0\5\1\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
Analisis c=new Analisis();
int estado = 0;
int nu=0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { c.linea=yyline; lexeme=yytext();return dos_puntos;
          }
        case 55: break;
        case 30: 
          { c.linea=yyline; lexeme=yytext();return menorigual;
          }
        case 56: break;
        case 17: 
          { c.linea=yyline; lexeme=yytext();return llave_abre;
          }
        case 57: break;
        case 36: 
          { c.linea=yyline; lexeme=yytext();return caracter;
          }
        case 58: break;
        case 35: 
          { c.linea=yyline; lexeme=yytext();return ent;
          }
        case 59: break;
        case 10: 
          { c.linea=yyline; lexeme=yytext();return  punto_coma;
          }
        case 60: break;
        case 5: 
          { c.linea=yyline; lexeme=yytext();return punto;
          }
        case 61: break;
        case 42: 
          { c.linea=yyline; lexeme=yytext();return paso;
          }
        case 62: break;
        case 52: 
          { c.linea=yyline; lexeme=yytext();return decremento;
          }
        case 63: break;
        case 6: 
          { c.linea=yyline; lexeme=yytext();return mas;
          }
        case 64: break;
        case 43: 
          { c.linea=yyline; lexeme=yytext();return flot;
          }
        case 65: break;
        case 3: 
          { c.linea=yyline; lexeme=yytext();return menos;
          }
        case 66: break;
        case 53: 
          { c.linea=yyline; lexeme=yytext();return incremento;
          }
        case 67: break;
        case 24: 
          { c.linea=yyline; lexeme=yytext();return decre;
          }
        case 68: break;
        case 20: 
          { c.linea=yyline; lexeme=yytext();return modulo;
          }
        case 69: break;
        case 46: 
          { estado = 3;c.linea=yyline; lexeme=yytext();return funcion;
          }
        case 70: break;
        case 32: 
          { c.linea=yyline; lexeme=yytext();return diferente_de;
          }
        case 71: break;
        case 50: 
          { c.linea=yyline; lexeme=yytext();return imprimir;
          }
        case 72: break;
        case 13: 
          { c.linea=yyline; lexeme=yytext();return parentesis_abre;
          }
        case 73: break;
        case 26: 
          { /* Ignore */
          }
        case 74: break;
        case 19: 
          { c.linea=yyline; lexeme=yytext();return igual;
          }
        case 75: break;
        case 25: 
          { c.linea=yyline; lexeme=yytext();return incre;
          }
        case 76: break;
        case 38: 
          { c.linea=yyline; lexeme=yytext();return car;
          }
        case 77: break;
        case 27: 
          { c.linea=yyline; lexeme=yytext();return si;
          }
        case 78: break;
        case 54: 
          { estado = 2;c.linea=yyline; lexeme=yytext();return procedimiento;
          }
        case 79: break;
        case 40: 
          { c.linea=yyline; lexeme=yytext();return IDF;
          }
        case 80: break;
        case 8: 
          { c.linea=yyline; lexeme=yytext();return division;
          }
        case 81: break;
        case 16: 
          { c.linea=yyline; lexeme=yytext();return corchete_cierra;
          }
        case 82: break;
        case 21: 
          { c.linea=yyline; lexeme=yytext();return menor_que;
          }
        case 83: break;
        case 44: 
          { c.linea=yyline; lexeme=yytext();return leer;
          }
        case 84: break;
        case 29: 
          { c.linea=yyline; lexeme=yytext();return comparacion;
          }
        case 85: break;
        case 14: 
          { c.linea=yyline; lexeme=yytext();return parentesis_cierra;
          }
        case 86: break;
        case 9: 
          { c.linea=yyline; lexeme=yytext();return multiplicacion;
          }
        case 87: break;
        case 4: 
          { c.linea=yyline; lexeme=yytext();return Numero;
          }
        case 88: break;
        case 22: 
          { c.linea=yyline; lexeme=yytext();return mayor_que;
          }
        case 89: break;
        case 23: 
          { c.linea=yyline; lexeme=yytext();return negacion;
          }
        case 90: break;
        case 34: 
          { c.linea=yyline; lexeme=yytext();return and;
          }
        case 91: break;
        case 51: 
          { c.linea=yyline; lexeme=yytext();return verdadero;
          }
        case 92: break;
        case 18: 
          { c.linea=yyline; lexeme=yytext();return llave_cierra;
          }
        case 93: break;
        case 11: 
          { c.linea=yyline; lexeme=yytext();return coma;
          }
        case 94: break;
        case 45: 
          { c.linea=yyline; lexeme=yytext();return falso;
          }
        case 95: break;
        case 15: 
          { nu=1;c.linea=yyline; lexeme=yytext();return corchete_abre;
          }
        case 96: break;
        case 49: 
          { estado = 1;c.linea=yyline; lexeme=yytext();return programa;
          }
        case 97: break;
        case 28: 
          { c.linea=yyline; lexeme=yytext();return sn;
          }
        case 98: break;
        case 41: 
          { c.linea=yyline; lexeme=yytext();return para;
          }
        case 99: break;
        case 37: 
          { c.linea=yyline; lexeme=yytext();return IDK;
          }
        case 100: break;
        case 47: 
          { c.linea=yyline; lexeme=yytext();return entonces;
          }
        case 101: break;
        case 7: 
          { /*Ignore*/
          }
        case 102: break;
        case 31: 
          { c.linea=yyline; lexeme=yytext();return mayorigual;
          }
        case 103: break;
        case 33: 
          { c.linea=yyline; lexeme=yytext();return or;
          }
        case 104: break;
        case 2: 
          { if (estado == 1) { // Si se encontró la palabra clave "Programa"
        c.linea = yyline;
        lexeme = yytext();
        estado = 0;
        return IDP; 
    }else if(estado == 2){
        c.linea = yyline;
        lexeme = yytext();
        estado = 0;
        return IDK; 
    }else if(estado == 3){
        c.linea = yyline;
        lexeme = yytext();
        estado = 0;
        return IDF; 
    } else { // Si no se ha encontrado "Programa"
        c.linea = yyline;
        lexeme = yytext();
        return ID; // Token para identificador normal
    }
          }
        case 105: break;
        case 48: 
          { c.linea=yyline; lexeme=yytext();return booleano;
          }
        case 106: break;
        case 39: 
          { c.linea=yyline; lexeme=yytext();return cad;
          }
        case 107: break;
        case 1: 
          { c.linea=yyline; lexeme=yytext();return Error;
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
